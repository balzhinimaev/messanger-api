// src/socket/middleware/auth.ts
import { Socket } from 'socket.io';
import jwt from 'jsonwebtoken';
import User, { IUser } from '../../models/User'; // –í–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

const JWT_SECRET = process.env.JWT_SECRET || 'supersecretkey';

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∫–µ—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ user
export interface AuthenticatedSocket extends Socket {
    user?: IUser;
}

export const socketAuthMiddleware = async (socket: AuthenticatedSocket, next: (err?: Error) => void) => {
    console.log('üîê [AuthMW] handshake.auth:', socket.handshake.auth);
    console.log('üîê [AuthMW] handshake.headers.authorization:', socket.handshake.headers.authorization);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞—Ç—å –≤ auth.token –∏–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
    let token = socket.handshake.auth.token as string | undefined;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤—Ä–æ–¥–µ Postman
    if (!token && socket.handshake.headers.authorization) {
        const authHeader = socket.handshake.headers.authorization;
        if (typeof authHeader === 'string' && authHeader.startsWith('Bearer ')) {
            token = authHeader.split(' ')[1];
        }
    }

    if (!token) {
        console.warn('üîê [AuthMW] Token not provided');
        return next(new Error('Authentication error: No token provided'));
    }

    try {
        // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const decoded = jwt.verify(token, JWT_SECRET) as { id: string };
        console.log('üîê [AuthMW] Token verified, user id:', decoded.id);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        const user = await User.findById(decoded.id);

        if (!user) {
            console.warn('üîê [AuthMW] User not found in DB');
            return next(new Error('Authentication error: User not found'));
        }

        // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–∫–µ—Ç—É
        socket.user = user;
        next();
    } catch (error) {
        console.error('üîê [AuthMW] Socket authentication failed:', error);
        return next(new Error('Authentication error: Invalid token'));
    }
}; 
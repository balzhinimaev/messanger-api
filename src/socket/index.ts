// src/socket/index.ts
import { Server } from 'socket.io';
import { socketAuthMiddleware, AuthenticatedSocket } from './middleware/auth';
import Chat from '../models/Chat';
import Message from '../models/Message';
import { validateSocketData } from './middleware/validateSocket';
import { sendMessageSocketSchema, typingSocketSchema, messageStatusSocketSchema } from '../lib/validators/socketValidators';
import { addUser, removeUser, getOnlineUsers } from './onlineUsers';
import { IChat } from '../models/Chat';

export const initSocketServer = (io: Server) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–µ middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    io.use(socketAuthMiddleware);

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—ã–µ middleware
    io.on('connection_error', (err) => {
        console.error('‚ùå Connection error:', err.message, err.data);
    });

    io.on('connection', async (socket: AuthenticatedSocket) => {
        // –ú—ã –º–æ–∂–µ–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è middleware
        const user = socket.user!; 
        console.log(`‚úÖ User connected: ${socket.id}, UserID: ${user._id}`);

        addUser(user._id.toString(), socket.id);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ–≥–æ —á–∞—Ç–æ–≤)
        const userChats = await Chat.find({ participants: user._id }).select('participants');
        const contactIds = new Set<string>();
        userChats.forEach((chat: IChat) => {
            chat.participants.forEach(participantId => {
                if (participantId.toString() !== user._id.toString()) {
                    contactIds.add(participantId.toString());
                }
            });
        });

        // –û–ø–æ–≤–µ—â–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–µ—Ç—å
        contactIds.forEach(contactId => {
            io.to(contactId).emit('user_online', { userId: user._id });
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –æ–Ω–ª–∞–π–Ω
        socket.emit('online_users', getOnlineUsers());

        // 1. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
        socket.join(user._id.toString());

        // 2. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –∫–æ–º–Ω–∞—Ç–∞–º-—á–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            const userChats = await Chat.find({ participants: user._id });
            userChats.forEach(chat => {
                socket.join(chat._id.toString());
                console.log(`User ${user._id} joined chat room: ${chat._id.toString()}`);
            });
        } catch (error) {
            console.error("Failed to join chat rooms:", error);
        }

        const sendMessageHandler = async (socket: AuthenticatedSocket, data: { chatId: string; content: string }) => {
            console.log('üì® [send_message] Data received:', data);
            const { chatId, content } = data;
            const senderId = socket.user!._id;
            console.log('üì® [send_message] Sender:', senderId.toString());

            const chat = await Chat.findOne({ _id: chatId, participants: senderId });
            if (!chat) {
                console.warn('‚ö†Ô∏è [send_message] Chat not found or sender is not a participant');
                socket.emit('error', { message: "You are not a participant of this chat." });
                return;
            }

            console.log('üì® [send_message] Chat found, creating message');

            try {
                const newMessage = new Message({ sender: senderId, chat: chatId, content });
                const savedMessage = await newMessage.save();
                console.log('üì® [send_message] Message saved with id:', savedMessage._id.toString());

                await Chat.findByIdAndUpdate(chatId, { lastMessage: savedMessage._id });
                console.log('üì® [send_message] Chat lastMessage updated');

                const populatedMessage = await Message.findById(savedMessage._id).populate('sender', 'username avatarUrl');
                console.log('üì® [send_message] Populated message ready, emitting to room', chatId);

                io.to(chatId).emit('message_received', populatedMessage);
                console.log(`üì® [send_message] Message emitted to room ${chatId}`);
            } catch (error) {
                console.error('‚ùå [send_message] Failed to send message:', error);
                socket.emit('error', { message: "Failed to send message." });
            }
        };

        const typingStartedHandler = (socket: AuthenticatedSocket, data: { chatId: string }) => {
            socket.to(data.chatId).emit('typing_indicator', {
                chatId: data.chatId,
                user: { id: socket.user!._id, username: socket.user!.username }
            });
        };

        const typingStoppedHandler = (socket: AuthenticatedSocket, data: { chatId: string }) => {
            socket.to(data.chatId).emit('typing_indicator_stopped', { chatId: data.chatId });
        };

        // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        const messageDeliveredHandler = async (socket: AuthenticatedSocket, data: { messageId: string, chatId: string }) => {
            console.log('‚úÖ [message_delivered] Data received:', data);
            try {
                const message = await Message.findById(data.messageId);
                if (!message) {
                    console.warn('‚ö†Ô∏è [message_delivered] Message not found');
                    return;
                }
                console.log('‚úÖ [message_delivered] Current status:', message.status);

                if (message.status === 'sent') {
                    message.status = 'delivered';
                    await message.save();
                    console.log('‚úÖ [message_delivered] Status updated to delivered');
                    
                    // –û–ø–æ–≤–µ—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —á—Ç–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                    io.to(message.sender.toString()).emit('message_status_updated', {
                        messageId: data.messageId,
                        chatId: data.chatId,
                        status: 'delivered'
                    });
                    console.log('‚úÖ [message_delivered] Emitted message_status_updated to sender');
                }
            } catch (error) {
                console.error('‚ùå [message_delivered] Failed to update status:', error);
            }
        };

        // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
        const messagesReadHandler = async (socket: AuthenticatedSocket, data: { chatId: string }) => {
            console.log('üëÅ [messages_read] Data received:', data);
            try {
                const userId = socket.user!._id;
                const chat = await Chat.findById(data.chatId).populate('participants');
                if (!chat) {
                    console.warn('‚ö†Ô∏è [messages_read] Chat not found');
                    return;
                }
                console.log('üëÅ [messages_read] Chat found, participants:', chat.participants.map(p => p._id.toString()));

                const partner = chat.participants.find(p => p._id.toString() !== userId.toString());
                if (partner) {
                    io.to(partner._id.toString()).emit('messages_marked_as_read', {
                        chatId: data.chatId,
                        readerId: userId
                    });
                    console.log('üëÅ [messages_read] Emitted messages_marked_as_read to partner', partner._id.toString());
                } else {
                    console.log('üëÅ [messages_read] No partner found (possibly self-chat)');
                }
            } catch (error) {
                console.error('‚ùå [messages_read] Failed to emit event:', error);
            }
        };

        socket.on('send_message', validateSocketData(sendMessageSocketSchema, sendMessageHandler));
        socket.on('typing_started', validateSocketData(typingSocketSchema, typingStartedHandler));
        socket.on('typing_stopped', validateSocketData(typingSocketSchema, typingStoppedHandler));
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        socket.on('message_delivered', validateSocketData(messageStatusSocketSchema, messageDeliveredHandler));
        socket.on('messages_read', validateSocketData(typingSocketSchema, messagesReadHandler)); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å—Ö–µ–º—É, —á—Ç–æ –∏ –¥–ª—è typing

        // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–∏—á–∏–Ω—ã
        socket.on('disconnect', (reason) => {
            console.log(`‚ùå User disconnected: ${socket.id}. Reason: ${reason}`);
            removeUser(user._id.toString(), socket.id);
            // –û–ø–æ–≤–µ—â–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏
            contactIds.forEach(contactId => {
                io.to(contactId).emit('user_offline', { userId: user._id });
            });
        });

        // 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
        socket.on('error', (err) => {
            console.error(`‚ö†Ô∏è Socket error on ${socket.id}:`, err);
        });
    });
}; 